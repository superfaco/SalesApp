@page "/SaleView"
@inject HttpClient client
@inject IJSRuntime js

<h3 class="h3">Sales</h3>
@if (Sales == null)
{
    <text>Loading...</text>
}
else
{
    <div>
        <div style="height: 60%;">
            <button type="button" class="btn btn-primary" @onclick="New">New Sale</button>
            <table class="table table-primary table-striped table-borded table-active">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Customer</th>
                        <th>Sale Date</th>
                        <th>Employee</th>
                        <th>Total</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Sale s in Sales)
                    {
                        <tr>
                            <td>@s.Id</td>
                            <td>@s.Customer</td>
                            <td>@s.SaleDate</td>
                            <td>@s.Employee</td>
                            <td>@s.Total</td>
                            <td>
                                <button type="button" class="btn btn-warning" @onclick="() => Edit(s)">Edit</button>
                                <button type="button" class="btn btn-danger" @onclick="() => Delete(s)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div style="height: 40%;">
            <SaleEditView Parent="this" Sale="Sale" Title="@Title"></SaleEditView>
        </div>
    </div>
}
@code {
    private Sale Sale { get; set; }
    private List<Sale> Sales { get; set; }
    private string Title { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await RefreshGrid();
    }

    public async Task RefreshGrid()
    {
        this.Sales = await client.GetFromJsonAsync<List<Sale>>("/sale");
        await InvokeAsync(StateHasChanged);
    }

    private void New()
    {
        this.Sale = new Sale();
        this.Title = "New Sale";
    }

    private void Edit(Sale sale)
    {
        this.Sale = sale;
        this.Title = "Edit Sale";
    }

    private async Task Delete(Sale sale)
    {
        this.Sale = null;
        if (await js.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?"))
        {
            await client.DeleteAsync($"/sale/{sale.Id}");
            await RefreshGrid();
        }
    }

}
